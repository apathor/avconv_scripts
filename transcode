#!/bin/bash
# transcode FORMAT SOURCE_DIR TARGET_DIR
# Transcode source directory of audio files to a new format into target directory.
# Â© Mike Lalumiere 2017

avformat() {
    local f="$1"
    if ! [ -f  "$f" ]; then return 1; fi
    local n
    n=$(avprobe -show_format "$f" 2>&- | awk -F= '/format_name/{ print $2 }')
    if [ -z "$n" ]; then return 2; fi
    printf "%s\n" "$n"
}

function transcode {
    # usage string
    local usage="USAGE: transcode FORMAT SOURCE_DIR TARGET_DIR"
    # requirements
    if ! type ffmpeg &>/dev/null; then
        printf "No ffmpeg available!\n" >&2
        return 1
    fi
    if ! type find   &>/dev/null; then
        printf "No find available?\n" >&2
        return 1
    fi
    # audio format argument
    local fmt="$1"
    if [ -z "$fmt" ]; then
        printf "%s\nFormat argument is required!\n" "$usage" >&2
        return 1
    fi
    # require a source directory argument
    local src="${2%%/}"
    if ! [ -n "$src" ]; then
        printf "%s\nSource directory argument is required!\n" "$usage" >&2
        return 1
    fi
    if ! [ -d "$src" ]; then
        printf "%s\nSource directory does not exist.\n" "$usage" "$src" >&2
        return 1
    fi
    # require a destination directory argument
    local dst="${3%%/}"
    if ! [ -n "$dst" ]; then
        printf "%s\nTarget directory argument is required!\n" "$usage" >&2
        return 1
    fi
    # search for track files
    local it
    declare -a files
    declare -a tracks
    while IFS= read -rd '' file; do
        files+=("$file")
        it=$(avformat "$file")
        if [ -n "$it" ]; then
            tracks+=("$file")
        else
            printf "NOT %q\n" "$file"
        fi
    done < <(find "$src" -type f -print0)
    # record failures
    local err=0
    # for each track
    local num inp seg ext run
    for ((num=0; num < "${#tracks[@]}"; num++)); do
        # using the name and extension of the file
        inp="${tracks[$num]}"
        ext="${inp##*.}"
        # generate the output file name with target extension
        seg="${inp##$src/}"
        out="$dst/${seg%%\.$ext}.$fmt"
        # write out progress
        printf "Track %d / %d - %s " "$((num+1))" "${#tracks[@]}" "${inp##$src/}" >&2
        # maybe setup output directory
        if ! [ -d "${out%/*}" ] && ! mkdir -p "${out%/*}"; then
            printf "Could not make directory.\n" >&2
            continue
        fi
        # skip if the output file already exists
        if [ -f "$out" ]; then
            printf "EXISTS\n"  >&2
            printf "%s\n" "$out"
            continue
        fi
        # copy if the input is already output format
        if [ "${ext,,}" == "${fmt,,}" ]; then
            printf "COPIED\n" >&2
            cp "$inp" "$out"
            printf "%s\n" "$out"
            continue
        fi
        # transcode the input file into output format
        if ffmpeg -n -i "$inp" "$out" &>/dev/null; then
            printf "CONVERTED\n" >&2
            printf "%s\n" "$out"
        else
            printf "FAILED\n" 
            let err++
        fi
    done
    # check
    if [ "$err" -gt 0 ]; then
        printf "Failed to transcode %d files." "$err" >&2
        return 3
    fi
    return 0
}
# run it unless sourced
if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then transcode "$@"; fi
